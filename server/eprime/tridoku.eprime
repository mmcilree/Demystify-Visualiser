$ Description of puzzle: https://bigideas4littlescholars.com/wp-content/uploads/2022/03/Spring-Daisies-Hex-Doku.pdf
$ Link to video tutorial of a puzzle:  https://bigideas4littlescholars.com/snowflake-sudoku-with-video-tutorial/
$ Techniques used boil down to:
$   Identifying common numbers or hexagons with not many blank triangles to target first
$   If a number must exist in a hexagon, and is excluded from all but one of the blank spaces, the number must go in the remaining blank space
$   If a number must exist in a hexagon, and there is only one blank space left, it must go there

language ESSENCE' 1.0

given height: int(1..)
letting heightdim be domain int(0..height-1)
given length: int(1..)
letting lengthdim be domain int(0..length-1)

$ Defines which elements of the 2d matrix map to triangles
given present: matrix indexed by [lengthdim, heightdim] of int(0..1)
given fixed: matrix indexed by [lengthdim, heightdim] of int(0..6)
given board_type: int(5..)

$ Defines sets of coordinates which form a hexagon around a given triangle
letting down_hex_coords be [[[-1,0],[1,0],[-1,1],[0,1],[1,1]],[[0,-1],[1,-1],[2,-1],[1,0],[2,0]],[[-2,-1],[-1,-1],[0,-1],[-2,0],[-1,0]]]
letting up_hex_coords be [[[-1,1],[0,1],[1,1],[-1,0],[1,0]],[[1,0],[2,0],[0,1],[1,1],[2,1]],[[-2,0],[-1,0],[-2,1],[-1,1],[0,1]]]

$#VAR grid
find grid: matrix indexed by [lengthdim, heightdim] of int(0..6)

$#CON norepeat_hex "cells ({a[0]},{a[1]}) and ({a[2]},{a[3]}) cannot both be {a[4]} as they are in overlapping hexagons"
find norepeat_hex: matrix indexed by [lengthdim,heightdim,lengthdim,heightdim,int(1..6)] of bool

such that

$ Transfer non empty boxes in the input grid to the output grid
forAll x: lengthdim.
    forAll y: heightdim.
        fixed[x,y] != 0 -> grid[x,y]=fixed[x,y],

$ If a box in the 2d grid does not represent a triangle in the triangular grid, its value is 0 and it will not be shown
forAll x: lengthdim.
    forAll y: heightdim.
        present[x,y] = 0 <-> grid[x,y]=0,

$ Ensure that the same number cannot occur in a hexagon of triangles
forAll x: lengthdim.
    forAll y: heightdim.
        ((x+y)%2=0->
            (forAll i: int(1..3).
                forAll j: int(1..5).
                    forAll num: int(1..6).
                        (x+down_hex_coords[i,j,1]>=0 /\ 
                        x+down_hex_coords[i,j,1]<length /\ 
                        y+down_hex_coords[i,j,2]>=0 /\ 
                        y+down_hex_coords[i,j,2]<height /\ 
                        present[x+down_hex_coords[i,j,1], y+down_hex_coords[i,j,2]]=1) -> 
                            (norepeat_hex[x,y,x+down_hex_coords[i,j,1],y+down_hex_coords[i,j,2],num] -> 
                                !(grid[x,y]=num /\ grid[x+down_hex_coords[i,j,1], y+down_hex_coords[i,j,2]]=num)))) /\
       ((x+y)%2=1->
            (forAll i: int(1..3).
                forAll j: int(1..5).
                    forAll num: int(1..6).
                        (x+up_hex_coords[i,j,1]>=0 /\ 
                        x+up_hex_coords[i,j,1]<length /\ 
                        y+up_hex_coords[i,j,2]>=0 /\ 
                        y+up_hex_coords[i,j,2]<height /\ 
                        present[x+up_hex_coords[i,j,1], y+up_hex_coords[i,j,2]]=1) -> 
                            (norepeat_hex[x,y,x+up_hex_coords[i,j,1],y+up_hex_coords[i,j,2],num] -> 
                                !(grid[x,y]=num /\ grid[x+up_hex_coords[i,j,1], y+up_hex_coords[i,j,2]]=num))))